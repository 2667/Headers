//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <UIKit/UIView.h>

@class CAGradientLayer, CALayer, NSArray, NSDictionary, NSMutableArray, NSString, QZDrawItem, QZDrawItemInteractionRect, QZDrawItemTextWrapper, QzoneCommSparkleWord, UIColor, UIFont, UIImage, UIImageView;
@protocol QZFeedCellDelegate, QZRichTextLabelDelegate;

@interface QZRichTextLabel : UIView
{
    NSArray *_colorChangeColorList;
    double _colorChangeDuration;
    double _colorChangeRepeatCount;
    _Bool _isNeedLayout;
    QZDrawItemTextWrapper *_richText;
    UIImage *_animationMaskImage;
    UIImageView *_textImageView;
    UIImage *_cacheImage;
    QZDrawItemTextWrapper *_cacheText;
    _Bool _isLinkClicked;
    struct CGPoint _toucingPoint;
    QZDrawItem *_touchingItem;
    int _xo;
    _Bool _redrawAfterFontLoaded;
    _Bool _hitOnExpandText;
    _Bool _userInteractionEnabledInPlainText;
    _Bool _isWrapping;
    _Bool _useAsyncRender;
    _Bool _ignoreWholeLabelTouch;
    _Bool _noHighLightWhenWholeLabelTouched;
    _Bool _handleEmotionView;
    _Bool _isSetAllTextNormal;
    int _textVerticalAlignment;
    int _textHorizontalAlignment;
    long long _normalTextOnly;
    QZDrawItemTextWrapper *_expandText;
    QZDrawItemInteractionRect *_backgroundArea;
    id <QZFeedCellDelegate> _feedDelegate;
    id <QZRichTextLabelDelegate> _touchDelegate;
    NSDictionary *_menuItemTypes;
    QzoneCommSparkleWord *_sparkleword;
    unsigned long long _touchEventType;
    NSDictionary *_touchParam;
    NSMutableArray *_emotionImageViewArray;
    CALayer *_colorChangeLayer;
    CAGradientLayer *_mGradientLayer;
}

+ (id)richLabelRenderQueue;
@property(retain, nonatomic) CAGradientLayer *mGradientLayer; // @synthesize mGradientLayer=_mGradientLayer;
@property(retain, nonatomic) CALayer *colorChangeLayer; // @synthesize colorChangeLayer=_colorChangeLayer;
@property(nonatomic) _Bool isSetAllTextNormal; // @synthesize isSetAllTextNormal=_isSetAllTextNormal;
@property(nonatomic) _Bool handleEmotionView; // @synthesize handleEmotionView=_handleEmotionView;
@property(nonatomic) _Bool noHighLightWhenWholeLabelTouched; // @synthesize noHighLightWhenWholeLabelTouched=_noHighLightWhenWholeLabelTouched;
@property(nonatomic) _Bool ignoreWholeLabelTouch; // @synthesize ignoreWholeLabelTouch=_ignoreWholeLabelTouch;
@property(nonatomic) _Bool useAsyncRender; // @synthesize useAsyncRender=_useAsyncRender;
@property(nonatomic) _Bool isWrapping; // @synthesize isWrapping=_isWrapping;
@property(retain, nonatomic) NSMutableArray *emotionImageViewArray; // @synthesize emotionImageViewArray=_emotionImageViewArray;
@property(retain, nonatomic) NSDictionary *touchParam; // @synthesize touchParam=_touchParam;
@property(nonatomic) unsigned long long touchEventType; // @synthesize touchEventType=_touchEventType;
@property(nonatomic) int textHorizontalAlignment; // @synthesize textHorizontalAlignment=_textHorizontalAlignment;
@property(nonatomic) int textVerticalAlignment; // @synthesize textVerticalAlignment=_textVerticalAlignment;
@property(retain, nonatomic) QzoneCommSparkleWord *sparkleword; // @synthesize sparkleword=_sparkleword;
@property(nonatomic) _Bool userInteractionEnabledInPlainText; // @synthesize userInteractionEnabledInPlainText=_userInteractionEnabledInPlainText;
@property(retain, nonatomic) NSDictionary *menuItemTypes; // @synthesize menuItemTypes=_menuItemTypes;
@property(nonatomic) __weak id <QZRichTextLabelDelegate> touchDelegate; // @synthesize touchDelegate=_touchDelegate;
@property(nonatomic) __weak id <QZFeedCellDelegate> feedDelegate; // @synthesize feedDelegate=_feedDelegate;
@property(readonly, nonatomic) QZDrawItemInteractionRect *backgroundArea; // @synthesize backgroundArea=_backgroundArea;
@property(nonatomic) _Bool hitOnExpandText; // @synthesize hitOnExpandText=_hitOnExpandText;
@property(retain, nonatomic) QZDrawItemTextWrapper *expandText; // @synthesize expandText=_expandText;
@property(nonatomic) long long normalTextOnly; // @synthesize normalTextOnly=_normalTextOnly;
@property(nonatomic) _Bool redrawAfterFontLoaded; // @synthesize redrawAfterFontLoaded=_redrawAfterFontLoaded;
@property(readonly, nonatomic) double colorChangeRepeatCount; // @synthesize colorChangeRepeatCount=_colorChangeRepeatCount;
@property(readonly, nonatomic) double colorChangeDuration; // @synthesize colorChangeDuration=_colorChangeDuration;
@property(readonly, copy, nonatomic) NSArray *colorChangeColorList; // @synthesize colorChangeColorList=_colorChangeColorList;
- (void).cxx_destruct;
- (void)etFontChanged:(id)arg1;
- (void)layerWillDraw:(id)arg1;
- (void)eventTouchCancel:(id)arg1 forEvent:(id)arg2;
- (id)hitTest:(struct CGPoint)arg1 withEvent:(id)arg2;
- (void)touchesCancelled:(id)arg1 withEvent:(id)arg2;
- (void)touchesEnded:(id)arg1 withEvent:(id)arg2;
- (void)touchesBegan:(id)arg1 withEvent:(id)arg2;
- (void)drawAnimationWithMask;
- (void)drawAnimation;
- (void)drawCAGradientLayerWithMask;
- (void)drawCAGradientLayer;
- (void)drawEmotion;
- (void)createAnimationMaskImageWithFinishMainBlock:(CDUnknownBlockType)arg1;
- (_Bool)hasAnimation;
- (void)destroyAnimation;
- (void)stopAnimation;
- (void)startAnimation;
- (_Bool)resetAnimationWhenHasColorFont;
- (void)setColorChangeAnimation:(id)arg1 colorChangeDuration:(double)arg2 colorChangeRepeatCount:(double)arg3;
- (void)setRichText:(id)arg1 andAnimationMaskImage:(id)arg2;
- (void)clearEmotionAndDisplay;
- (void)setText:(id)arg1 font:(id)arg2 textColor:(id)arg3 numberOfLines:(long long)arg4 etFontId:(long long)arg5 etFontUrl:(id)arg6 etFontType:(long long)arg7 lineSpace:(double)arg8 useParagraph:(_Bool)arg9 truncationNotShowMore:(_Bool)arg10 backgroundImage:(id)arg11 needTextAnimation:(_Bool)arg12;
- (void)setText:(id)arg1 font:(id)arg2 textColor:(id)arg3 numberOfLines:(long long)arg4 etFontId:(long long)arg5 etFontUrl:(id)arg6 etFontType:(long long)arg7 lineSpace:(double)arg8 useParagraph:(_Bool)arg9 truncationNotShowMore:(_Bool)arg10;
- (void)setText:(id)arg1 maxLine:(long long)arg2 font:(id)arg3 color:(id)arg4 backgroundImage:(id)arg5;
- (void)setText:(id)arg1 maxLine:(long long)arg2 font:(id)arg3 color:(id)arg4 needTextAnimation:(_Bool)arg5;
- (void)setText:(id)arg1 maxLine:(long long)arg2 font:(id)arg3 color:(id)arg4;
- (void)createCornerBackgroundWithColor:(id)arg1 needCorner:(_Bool)arg2;
- (struct CGSize)sizeThatFits:(struct CGSize)arg1;
- (void)removeSubLayer;
- (void)reset;
- (double)realWidth;
- (double)totalHeight;
@property(readonly, nonatomic) long long etFontType;
@property(readonly, copy, nonatomic) NSString *etFontUrl;
@property(readonly, nonatomic) long long etFontId;
@property(readonly, nonatomic) double lineSpace; // @dynamic lineSpace;
@property(readonly, nonatomic) _Bool useParagraph; // @dynamic useParagraph;
@property(readonly, nonatomic) _Bool truncationNotShowMore; // @dynamic truncationNotShowMore;
@property(readonly, nonatomic) long long numberOfLines; // @dynamic numberOfLines;
@property(readonly, nonatomic) UIColor *textColor; // @dynamic textColor;
@property(readonly, nonatomic) UIFont *font; // @dynamic font;
@property(readonly, copy, nonatomic) NSString *text; // @dynamic text;
- (id)renderTextWithTextWrapper:(id)arg1 size:(struct CGSize)arg2 scale:(double)arg3 bounds:(struct CGRect)arg4;
- (void)drawRect:(struct CGRect)arg1;
- (void)setBackgroundColor:(id)arg1;
- (void)setBounds:(struct CGRect)arg1;
- (void)setFrame:(struct CGRect)arg1;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1;

// Remaining properties
@property(nonatomic) _Bool isNeedLayout; // @dynamic isNeedLayout;
@property(readonly, nonatomic) QZDrawItemTextWrapper *richText; // @dynamic richText;

@end

